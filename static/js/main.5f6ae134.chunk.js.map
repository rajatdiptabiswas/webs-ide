{"version":3,"sources":["data/ThemesList.ts","components/Editor.tsx","components/Preview.tsx","components/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThemesList","Blackboard","path","theme","Cobalt","Dracula","GitHub","IDLE","Monokai","Editor","language","code","setCode","width","height","defaultLanguage","defaultValue","value","onChange","options","fontSize","beforeMount","monaco","Object","keys","map","key","editor","defineTheme","Preview","sourceCode","className","title","sandbox","srcDoc","Navbar","textColor","backgroundColor","themeOption","setThemeOption","themeOptions","style","color","name","App","label","toLowerCase","useState","setTheme","useEffect","foregroundColor","colors","dedent","html","setHTML","css","setCSS","js","setJS","setSourceCode","timeout","setTimeout","inputDelaySeconds","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f6ae134.chunk.js","sourcesContent":["import Blackboard from './../themes/Blackboard.json';\nimport Cobalt from './../themes/Cobalt.json';\nimport Dracula from './../themes/Dracula.json';\nimport GitHub from './../themes/GitHub.json';\nimport IDLE from './../themes/IDLE.json';\nimport Monokai from './../themes/Monokai.json';\n\ntype ThemesListType = {\n  [themeName: string]: {\n    path: string;\n    theme: any;\n  };\n};\n\nconst ThemesList: ThemesListType = {\n  Blackboard: {\n    path: './themes/Blackboard.json',\n    theme: Blackboard,\n  },\n  Cobalt: {\n    path: './themes/Cobalt.json',\n    theme: Cobalt,\n  },\n  Dracula: {\n    path: './themes/Dracula.json',\n    theme: Dracula,\n  },\n  GitHub: {\n    path: './themes/GitHub.json',\n    theme: GitHub,\n  },\n  IDLE: {\n    path: './themes/IDLE.json',\n    theme: IDLE,\n  },\n  Monokai: {\n    path: './themes/Monokai.json',\n    theme: Monokai,\n  },\n};\n\nexport default ThemesList;\n","import React from 'react';\nimport MonacoEditor, { Monaco } from '@monaco-editor/react';\nimport ThemesList from './../data/ThemesList';\n\ntype EditorProps = {\n  language: string;\n  theme: string;\n  code: string;\n  setCode: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport default function Editor({\n  language,\n  theme,\n  code,\n  setCode,\n}: EditorProps) {\n  function handleEditorWillMount(monaco: Monaco) {\n    Object.keys(ThemesList).map((key) =>\n      monaco.editor.defineTheme(key, ThemesList[key].theme)\n    );\n  }\n\n  return (\n    <MonacoEditor\n      width=\"100%\"\n      height=\"100%\"\n      theme={theme}\n      defaultLanguage={language}\n      defaultValue={`${language}\\n`}\n      value={code}\n      onChange={(value: string | undefined) => {\n        setCode(value ?? '');\n      }}\n      options={{\n        fontSize: 13,\n      }}\n      beforeMount={handleEditorWillMount}\n    />\n  );\n}\n","import React from 'react';\n\ntype PreviewProps = {\n  sourceCode: string;\n};\n\nexport default function Preview({ sourceCode }: PreviewProps) {\n  return (\n    <iframe\n      className=\"w-full h-full\"\n      title=\"preview\"\n      sandbox=\"allow-scripts\"\n      srcDoc={sourceCode}\n    />\n  );\n}\n","import Select from 'react-select';\n\ntype NavbarProps = {\n  textColor?: string;\n  backgroundColor?: string;\n  themeOption: any;\n  setThemeOption: any;\n  themeOptions: {\n    value: string;\n    label: string;\n  }[];\n};\n\nexport default function Navbar({\n  textColor,\n  backgroundColor,\n  themeOption,\n  setThemeOption,\n  themeOptions,\n}: NavbarProps) {\n  return (\n    <nav\n      className=\"inset-x-0 top-0 p-4 sm:px-8 h-16 shadow-lg fixed z-10 bg-gray-50\"\n      style={{ backgroundColor: backgroundColor }}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div\n          className=\"flex text-lg font-mono sm:text-2xl\"\n          style={{ color: textColor }}\n        >\n          <span className=\"font-light\">webs</span>\n          <span className=\"font-bold\">IDE</span>\n        </div>\n        <div className=\"flex items-center space-x-4 font-mono\">\n          <Select\n            name=\"theme\"\n            value={themeOption}\n            options={themeOptions}\n            onChange={setThemeOption}\n          />\n          <div style={{ color: textColor }}>theme</div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport dedent from 'ts-dedent';\n\nimport Editor from './components/Editor';\nimport Preview from './components/Preview';\nimport Navbar from './components/Navbar';\n\nimport ThemesList from './data/ThemesList';\n\nfunction App() {\n  const themeOptions = Object.keys(ThemesList).map((key) => {\n    return { value: key, label: key.toLowerCase() };\n  });\n\n  const [themeOption, setThemeOption] = useState(themeOptions[0]);\n  const [theme, setTheme] = useState(ThemesList[themeOption.value].theme);\n\n  useEffect(() => {\n    setTheme(ThemesList[themeOption.value].theme);\n  }, [themeOption]);\n\n  const foregroundColor = theme.colors['editor.foreground'];\n  const backgroundColor = theme.colors['editor.background'];\n\n  const [html, setHTML] = useState(dedent`\n    <!-- html -->\n    <h1 id=\"title\">hello world</h1>\n    <button onClick=\"fn()\">ðŸŒˆ</button>\n\n  `);\n  const [css, setCSS] = useState(dedent`\n    /* css */\n    body {\n      color: #F0F0F0;\n      background-color: #121212;\n      font-family: sans-serif;\n      \n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n    }\n\n  `);\n  const [js, setJS] = useState(dedent`\n    // javascript\n    const title = document.getElementById('title');\n\n    let index = 0;\n    const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n\n    const fn = () => {\n      title.style.color = colors[index++];\n      index %= colors.length;\n    };\n\n  `);\n  const [sourceCode, setSourceCode] = useState(``);\n\n  const inputDelaySeconds = 0.5;\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSourceCode(dedent`\n        </html>\n          <body>\n            ${html}\n          </body>\n          <style>\n            ${css}\n          </style>\n          <script>\n            ${js}\n          </script>\n        </html>\n      `);\n    }, inputDelaySeconds * 1000);\n\n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n  return (\n    <div className=\"flex flex-col overflow-hidden\">\n      <Navbar\n        textColor={foregroundColor}\n        backgroundColor={backgroundColor}\n        themeOption={themeOption}\n        setThemeOption={setThemeOption}\n        themeOptions={themeOptions}\n      />\n      <div className=\"flex min-h-container mt-16\">\n        <div className=\"flex-1\">\n          <div className=\"h-1/3\">\n            <Editor\n              language=\"html\"\n              theme={themeOption.value}\n              code={html}\n              setCode={setHTML}\n            />\n          </div>\n          <div className=\"h-1/3\">\n            <Editor\n              language=\"css\"\n              theme={themeOption.value}\n              code={css}\n              setCode={setCSS}\n            />\n          </div>\n          <div className=\"h-1/3\">\n            <Editor\n              language=\"javascript\"\n              theme={themeOption.value}\n              code={js}\n              setCode={setJS}\n            />\n          </div>\n        </div>\n        <div className=\"flex-1\">\n          <Preview sourceCode={sourceCode} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}